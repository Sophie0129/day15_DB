--데이터 베이스 = 저장소, 각종 정보들을 정형화 시켜놓은 것, 엑셀 표 = 

--호스트 이름 localhost = 127.0.0.1
--포트는 자동으로 1521
--SID 는 버전 18이하는 xe / 19이상은 orcl

--sql developer가 편집기

--cntl + enter = 실행

--관리자 계정, 일반 계정. 일반계정은 제약이 있는 계정

--문장 끝에 세미콜론;

--create user 사용자명 identified dy 비밀번호;
--19버전은 사용자명 앞에 C##을 붙여햐 한다.(설정에 따라 붙히지 않아도 생성된다)

--이후 접속을 할때도 c##사용자명 형태로 사용자 이름을 적어준다

--grant = 권한 부여

--컬럼명 number > 숫자 자료형 / 컬럼명 varchar2(20) > 문자 자료형,20바이트가 최대
--컬럼명 date > 날짜 자료형
--primary key(컬럼명) > 해당 컬럼의 중복 값을 허용하지 않게 한다
--대소문자를 구분하지 않는다.

--desc 컬럼명; > 컬럼과 자료형 출력
--위 출력에서 널? 부분에 빈칸이라면 빈값을 허용하지만, not null 이면 빈값을 허용하지 않는다는 뜻
--프라이머리키로 만들면 not null이다.


create table person(
    num number, --숫자 저장
    name VARCHAR2(10)not null --대소문자를 구분하지 않는다
    BIRth varchar2(10),
    tel VARchar2(20),
    primary key(num)--중복을 허용하지 않는다
    --프라이머리키로 설정된 값이 중복이 되면 에러남
);

desc person;--컬럼과 자료형 출력

create table person111(
    num number,
    name VARCHAR2(10)not null 
    BIRth varchar2(10) not null,
    tel VARchar2(20),
    primary key(name)
 );
 desc person111;--값 출력
    
insert into person values(10,'홍길동','20231216','010xx');
--문자열은 작은 따옴표
insert into person values(1001,'홍길2','202316','123456');

insert into person(num, name, birth, tel) --각 값에 할당되도록 맞는 위치에 적어주기
values(100,'김개똥','2023','7894');

select * from person; --데이터를 가지고 온다
select num, name from person;
select * from person where num = 10; --특정데이터 가져오기
select * from person where name = '김개똥'; --찾는 데이터에 따라 컬럼명 바꿔주기

select * from tab; --테이블에 몇개의 값이 있는지

delete from person; --데이터 삭제
select * from person;

insert into person values(10,'홍길동','20231216','010xx');
insert into person values(1001,'홍길2','202316','123456');
insert into person(num, name, birth, tel)
values(100,'김개똥','2023','7894');

--드래그로 다 묶고 실행시키면 한번에 여러개 실행됨
--그외 실행하고 싶으면 해당 줄이 선택된 상태에서 실행해야 실행됨

select * from person;
delete from person where tel='010xx'; --해당값이 있는 행을 다 삭제
select * from person;

update person set name ='김길이'; --저장된 모든 값을 다 해당값으로 바꿈
--where을 이용해 특정값 바꾸기 가능
select * from person;

update person set name='홍길동', birth='111' where num=100;
select * from person;
--커밋 = 완전저장. 커밋전에는 임시저장소에 저장한것
--cmd 창에서도 sql을 쓸수 있지만 커밋을 안하면 서로 각자의 임시저장소에만 저장된 상태라
--서로 값을 공유하지 않음

select * from person;

commit;

delete from person; --삭제 이후 커밋을 하지 않으면 임시 저장소의 값만 지워지고,
--데이터베이스에는 그전에 저장한 값이 있다.
--DB에서 롤백으로 값을 다시 불러올 수 있음
select * from person;

rollback; --커밋-롤백 - 트랜젝션이라고 부름
select * from person;
----------
create table test_table(num number);
desc test_table;

alter table test_table add(name varchar2(20));
desc test_table;

alter table test_table modify(name number);--컬럼 자료형 변환
desc test_table;

alter table test_table drop column name;-- 컬럼 삭제
desc test_table;
    
alter table test_table rename column num to num_b;--컬럼명 변경
--DB에서 _언더바는 연결어 쓸때 사용
desc test_table;

drop table test_table;--테이블 삭제
desc test_table;

-------------------------------------------------------------------

create table STUDENT(
id varchar2(10),
name varchar2(10),
kor varchar2(5),
eng varchar2(5),
math varchar2(5),
primary key(id)
);

insert into STUDENT values(
'240201','홍길동','60','80','70'
);
insert into STUDENT values(
'240202','김길동','50','60','90'
);
insert into STUDENT values(
'240203','김개똥','70','40','80'
);

update STUDENT set 
kor='100', eng='95', math='90' where id='240201';
update STUDENT set 
kor='85', eng='80', math='75' where id='240202';
update STUDENT set 
kor='70', eng='65', math='60' where id='240203';

select * from student;
commit;
delete student;
select * from student;
rollback;
select * from student;

select * from student where eng >= 90;--이조건에 해당하는 값을 불러옴
select * from student shere kor != 100;
--점수는 문자로써 등록되었지만 일반 숫자로 연산과 비교가 가능함

select math from student where name='홍길동'; --홍길동에 대한 수학 값만 가져옴
select math/2 from student where name='홍길동';
select math+100 from student where name='홍길동';
select math*100 from student where name='홍길동';
select mod(math,3) from student where name='홍길동';

select * from student;
select * from student where kor >= 90 and math >= 60;
select * from student where kor >= 90 or math >= 60;
select * from student where not kor >= 90;

select * from student where kor >= 90 and kor <= 100; --90이상 100이하 값인 국어값 가져오기
select * from student where kor between  90 and 100;--위의 식과 같다.

create table test_number(
    num_ps number(5,2), --앞숫자는 전체자리수, 뒷숫자는 소수점 2개까지 넣겠다는 의미
    num_p number(3), --정수로 3자리까지 저장한다
    num number
);

insert into test_number values(1.123456, 1.123456, 1.123456);
select * from test_table;
insert into test_number values(1234.123456, 1.123456, 1.123456);
--(5, 2)이기 때문에 소수점 2개를 포함해 정수값까지 전부 5자리여야해서 정수값이 4개가 되면 
--소수 2자리를 넣을 수 없어서 오류남
select * from test_table;

--Date java.util.Date, java.sql.Date

create table test_date(my_date date);
insert into test_date values(sysdate);--시스템 날짜를 얻어오는 기능
insert into test_date values('2000/12/24');--직접 날짜 넣기
select * from test_date;
--보이기엔 날짜만 보이지만 시간분초 도 같이 들어가 있다.
alter session set nls_date_format = 'YYYY/MM/DD HH:MI:SS';
insert into test_date values('2000/12/24 12:12:12');
select * from test_date where my_date < '2024/02/24';--날짜도 비교가 가능하다
--해당 일자의 값만 가져온다.

create table test_char(
ch char(5),
var varchar2(20)--varchar2는 20바이트가 최대
);

insert into test_char values('1', '1');
select lengthb(ch), lengthb(var) from test_char;

select * from student;
insert into student values('4', '길고인', '10', '10', '10');
select*from student where name like '김%';--김으로 시작하는 모든 값을 가져옴
select*from student where name like '%김';--김으로 끝나는 모든 값을 가져옴
select*from student where name like '%김%';--김 자가 들어가는 모든 값을 가져옴

select * from student;
select * from student order by name desc; --내림차순 출력
select * from student order by name asc; --오름차순 출력

select * from student order by eng desc, math asc; -- 점수별 정렬

--------------------------------------------------------

create table employee (
name varchar2(20),
sal number,
job varchar2(20),
join date
);

insert into employee values('홍길동','2000000','컴퓨터','2222/12/24');

alter session set nls_date_format = 'YYYY/MM/DD';


select * from employee;
drop table employee;
rollback;

alter table employee add name varchar2(20);
delete from employee where name='홍길동';


insert into employee values('설까치',1800000,'삼성','2017/10/24');
insert into employee values('로버트',1850000,'애플','2019/01/04');
insert into employee values('고도리',2200000,'엘지','2017/11/06');
insert into employee values('김개똥',2500000,'SK','2017/04/14');
insert into employee values('리우뚱',2410000,'샤오미','2018/01/09');
insert into employee values('강민',1900000,'삼성','2019/10/24');
insert into employee values('할리',1800000,'애플','2019/12/04');
insert into employee values('심심해',4630000,'엘지','2015/04/02');
insert into employee values('놀아줘',2770000,'SK','2017/01/24');
insert into employee values('왕만두',3650000,'샤오미','2016/08/04');
insert into employee values('머리빨',4210000,'삼성','2015/03/18');
insert into employee values('마리오',2720000,'애플','2017/01/04');
insert into employee values('최치우',4320000,'엘지','2015/06/07');
insert into employee values('안깔쌈',3490000,'SK','2015/09/07');
insert into employee values('끝짱',2200000,'샤오미','2017/05/04');
insert into employee values('막장',1920000,'삼성','2018/11/24');
insert into employee values('드라마',3420000,'애플','2016/07/29');
insert into employee values('개똥이',1800000,'엘지','2018/12/24');
insert into employee values('마포구',2230000,'SK','2018/01/05');
insert into employee values('소고기',1800000,'샤오미','2019/01/09');
insert into employee values('짜장면',2100000,'삼성','2017/10/24');
insert into employee values('소곱창',2200000,'애플','2017/11/04');
insert into employee values('참이슬',1950000,'엘지','2017/10/24');
insert into employee values('뤼우뚱',1800000,'SK','2018/10/24');
insert into employee values('위메프',1800000,'샤오미','2019/12/07');
insert into employee values('북경시',1880000,'삼성','2018/11/14');
insert into employee values('스미스',1970000,'애플','2019/06/04');
insert into employee values('핸드폰',7200000,'엘지','2010/01/27');
insert into employee values('빅스비',3570000,'SK','2015/02/17');
insert into employee values('노라줘',3200000,'샤오미','2015/11/24');
insert into employee values('사이다',2400000,'삼성','2017/09/26');
insert into employee values('김말이',7000000,'애플','2010/01/21');
insert into employee values('오도독',6230000,'엘지','2011/08/19');

insert into employee values('쌈지돈',3710000,'SK','2015/08/19');
insert into employee values('화장지',1770000,'샤오미','2019/04/28');
insert into employee values('소화기',1920000,'삼성','2019/10/07');
insert into employee values('박효신',2670000,'애플','2017/11/24');
insert into employee values('판빙빙',3120000,'엘지','2016/05/19');
insert into employee values('김재욱',4190000,'SK','2015/01/02');
insert into employee values('송혜교',4280000,'샤오미','2015/01/02');
insert into employee values('송중기',3700000,'삼성','2016/02/17');
insert into employee values('손홍민',2220000,'애플','2018/02/04');
insert into employee values('백종원',2760000,'엘지','2017/10/14');
insert into employee values('오창석',2620000,'SK','2017/09/04');
insert into employee values('스텔라',2500000,'샤오미','2017/11/20');
insert into employee values('멕스웰',1970000,'삼성','2017/10/30');
insert into employee values('조현',  2720000,'애플','2018/11/11');
insert into employee values('류현진',2600000,'엘지','2015/11/19');
insert into employee values('은지원',5670000,'SK','2017/10/16');
insert into employee values('전효성',3750000,'샤오미','2015/09/15');
insert into employee values('이채은',3400000,'삼성','2016/02/09');
insert into employee values('최고봉',8900000,'애플','2010/01/04');
insert into employee values('광화문',1860000,'엘지','2017/10/24');
insert into employee values('동대문',1790000,'SK','2017/10/24');
insert into employee values('서대문',2880000,'샤오미','2016/02/27');
insert into employee values('대통령',2320000,'삼성','2016/05/24');
insert into employee values('예지원',1780000,'애플','2019/01/09');
insert into employee values('정소민',2900000,'엘지','2016/10/22');
insert into employee values('워너원',3000000,'SK','2015/10/10');
insert into employee values('북한군',3200000,'샤오미','2015/11/11');
insert into employee values('남한군',2500000,'삼성','2016/12/19');
insert into employee values('짜투리',1850000,'애플','2018/04/03');
insert into employee values('이승기',1900000,'엘지','2018/01/01');
insert into employee values('기차길',1790000,'SK','2018/05/02');
insert into employee values('길거리',2700000,'샤오미','2016/07/20');


select * from employee where sal*12 >= 100000000;
select * from employee where join < '2015/01/01';
select * from employee where sal between 2800000 and 3000000;

select * from employee where join >= '2015/01/01' and sal*12 >= 60000000;
select * from employee where (job = '삼성' or job = '엘지') and sal*12 >= 50000000;

--select * from employee order by job asc;
--select * from employee order by sal desc;
select * from employee where name like '%김%' and sal*12 >= 30000000
order by job asc, sal desc;

desc employee;
