데이터 베이스 = 저장소, 각종 정보들을 정형화 시켜놓은 것, 엑셀 표 = 

호스트 이름 localhost = 127.0.0.1
포트는 자동으로 1521
SID 는 버전 18이하는 xe / 19이상은 orcl

sql developer가 편집기

관리자 계정, 일반 계정. 일반계정은 제약이 있는 계정

create user 사용자명 identified dy 비밀번호;
19버전은 사용자명 앞에 C##을 붙여햐 한다.(설정에 따라 붙히지 않아도 생성된다)
이후 접속을 할때도 c##사용자명 형태로 사용자 이름을 적어준다

cntl + enter = 실행
문장 끝에 세미콜론;
grant = 권한 부여

컬럼명 number > 숫자 자료형
컬럼명 varchar2(20) > 문자 자료형,20바이트가 최대
컬럼명 date > 날짜 자료형
primary key(컬럼명) > 해당 컬럼의 중복 값을 허용하지 않게 한다
대소문자를 구분하지 않는다.

테이블 만드는 폼
create table 테이블명(
    컬럼명 number,
    컬럼명 VARCHAR2(내용에 따른 바이트 크기), 
    컬럼명 varchar2(10),
    컬럼명 VARchar2(20),
    primary key(컬럼명)
 );


desc 컬럼명; > 컬럼과 자료형 출력
위 출력에서 널? 부분에 빈칸이라면 빈값을 허용하지만, not null 이면 빈값을 허용하지 않는다는 뜻
프라이머리키로 만들면 not null이다.

문자열은 작은 따옴표로 적는다

내용 추가 = insert
insert into 테이블명 values(1001,'홍길2','202316','123456');
> 컬럼의 갯수를 맞춰서 적어준다.

insert into person(num, name, birth, tel) values(100,'김개똥','2023','7894');
> 각 값에 할당되도록 맞는 위치에 적어주어 내용추가 가능.

where = 특정값을 지정할 때 쓴다.

출력폼 = select
select*from 테이블명;  >  테이블 전체를 보여줌
select 컬럼명 from 테이블명;  >  해당 테이블의 해당 컬럼만 보여줌
select*from 테이블명 where 컬럼명 = 값;  >  해당 컬럼에서 해당 값이 있는 행만 보여줌
select*from tab;  >  테이블에 몇개의 값이 있는지 보여줌

- * 은 전체값을 뜻한다.

디벨로퍼 내에서 실행을 시키려면 해당 줄이 선택되어 있어야 한다.
순서에 따라 자동실행되지 않는다.
여러줄을 한번에 실행시키려면 드래그로 다 선택한 후에 실행시키면 된다.

숫자는 문자로써 등록되어도 일반 숫자로 연산과 비교가 가능하다.
ex) 문자로서 등록된 eng = '80'
select * from student where eng >= 90; 와 같이 비교하고 값을 받을 수 있다.

삭제 폼 = delete
delete from 테이블명;  > 해당 테이블 내용 삭제
delete from 테이블명 where 컬럼명 = 값;  > 해당 값이 있는 행만 삭제

교체 폼 = update
update 테이블명 set 컬럼명 = 값;  > 해당 컬럼의 값을 해당 값으로 전부 교체

commit; = 완전 저장. 임시 저장소가 아닌 DB에 저장하는것.

cmd창으로도 sql을 쓸수 있다. 저장을 하면 cmd의 임시 저장소에 저장하는것.
sql developer에서도 코드짜놓고 저장하면 디벨로퍼의 임시 저장소에 저장하는것.

그래서 cmd와 디벨로퍼간의 정보교환이 안된다.
commit을 하면 DB에 저장이 된것이라 서로 값을 공유한다.

같은 맥락으로 삭제이후에 커밋을 하지 않으면 실제 데이터는 그대로 남고,
임시 저장소의 값만 지워진것. DB에는 그전에 저장한 값이 남아 있다.

rallback; = 방금전 실행된것을 되돌린다.
insert,update,delete 쿼리문은 commit 을 하지않으면 rollback으로 복구를 시킬 수 있지만
drop table을 한경우에는 rollback이 되지 않습니다

커밋-롤백을 ㅡ트랜젝션이라고 부른다.

alter = 사용하면 연동된것들을 일일히 수정해주어야해서 추천하지 않는다.
처음에 잘 살펴보고 확인해서 테이블을 만들것.

alter table 테이블명 modify(컬럼명 자료형);  > 컬럼 자료형 변환
alter table 테이블명 rename column 컬럼명 to 새컬럼명  > 기존 컬럼명을 새 컬럼명으로 바꾼다
alter table 테이블명 drop culumn 컬럼명;  > 해당 컬럼 삭제

자바에서 연결어는 대문자로 쓰는 규칙이 있는데,(testClass)
sql에서는 _언더바로 쓰는 규칙이 있다.(test_class)

drop = 영구삭제
drop table 테이블명 > 해당 테이블 삭제

-DELETE 명령어는 데이터는 지워지지만 테이블 용량은 줄어 들지 않는다.
원하는 데이터만 지울 수 있다. 삭제 후 잘못 삭제한 것을 되돌릴 수 있다.
(테이블과 행과 열이 그대로, 내용만 삭제한다)
-TRUNCATE 명령어는 용량이 줄어 들고, 인덱스 등도 모두 삭제 된다.
테이블은 삭제하지는 않고, 데이터만 삭제한다. 한꺼번에 다 지워야 한다. 삭제 후 절대 되돌릴 수 없다.
(테이블만 남기고 행과 열, 내용 전부 삭제)
-DROP 명령어는 테이블 전체를 삭제, 공간, 객체를 삭제한다. 삭제 후 절대 되돌릴 수 없다.
(테이블 자체를 삭제)

drop table을 한경우에는 rollback이 되지 않습니다
이럴경우, Oracle FlashBack 기능을 활용하면 됩니다.

데이터베이스는 테이블과 연관된 데이터를 바로 삭제처리 하지 않습니다.
바로 삭제처리 하지않은 데이터는 테이블의 이름을 변경하여 관련 오브젝트를 Recyle bin 에 저장을 합니다.


한 행에서 원하는 값만 보기
select 컬럼명1 from 테이블명 where 컬럼명2 = 컬럼2의 값;
> 컬럼2의 값들 중에서 컬럼1의 값만 보여준다.

select * from 테이블명 where 컬럼명 >= 90 and 컬럼명 <= 100; > 90이상 100이하 값인 국어값 가져오기
select * from 테이블명 where 컬럼명 between 90 and 100;  > 위의 식과 같다.

between-and로 중간값 불러오기 가능.

컬럼명 number(5,2)  > 앞숫자는 전체자리수, 뒷숫자는 소수점 2개까지 넣겠다는 의미
컬럼명 number(3)  > 정수로 3자리까지 저장한다

insert into 테이블명 values(1234.123456, 1.123456);

위와 같을 때,
실제 들어가는 값은 (5, 2)이기 때문에 소수점 2개를 포함해 정수값까지 전부 5자리여야해서
정수값이 4개가 되면 소수 2자리를 넣을 수 없어서 오류가 난다.


insert into 테이블명 values(sysdate);  > 시스템 날짜를 얻어오는 기능
insert into 테이블명 values('2000/12/24');  > 직접 날짜 넣기도 가능
테이블을 출력해보면 보이기엔 날짜만 보이지만 시간분초 도 같이 들어가 있다.

alter session set nls_date_format = 'YYYY/MM/DD HH:MI:SS';
> 시스템 날자의 폼을 맞춰준다. 위와같이 하면 테이블에서도 시간분초가 보인다.


select * from 테이블명 where 컬럼명 < '2024/02/24';
> 날짜도 비교가 가능하다

select*from 테이블명 where 컬럼명 like '김%';  > 김으로 시작하는 모든 값을 가져옴
select*from 테이블명 where 컬럼명 like '%김';  > 김으로 끝나는 모든 값을 가져옴
select*from 테이블명 where 컬럼명 like '%김%';  > 김 자가 들어가는 모든 값을 가져옴

select * from 테이블명 order by 컬럼명 desc;  > order by - desc 내림차순 출력
select * from 테이블명 order by 컬럼명 asc;  > order by - asc 오름차순 출력

select * from 테이블명 order by 컬럼명1 desc, 컬럼명2 asc;  > 여러개 한번에 정렬 가능

-정렬은 보기위한 수단으로, 실제 데이터 내용이 바뀌지는 않는다.
그리고 그런 용도로만 사용하는것 같다.




































